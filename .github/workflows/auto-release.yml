name: Auto-Release Standard IG Publisher

on:
  schedule:
    # Check daily at 00:00 UTC for new IG Publisher versions
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release even if no new version found'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gefyra/ig-publisher

jobs:
  check-ig-publisher-version:
    runs-on: ubuntu-latest
    outputs:
      new_version_available: ${{ steps.version-check.outputs.new_version_available }}
      latest_version: ${{ steps.version-check.outputs.latest_version }}
      current_version: ${{ steps.version-check.outputs.current_version }}
      new_tag: ${{ steps.version-check.outputs.new_tag }}
    permissions:
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for new IG Publisher version
        id: version-check
        run: |
          # Get latest IG Publisher version from GitHub API
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/HL7/fhir-ig-publisher/releases/latest)
          LATEST_VERSION=$(echo "$LATEST_RELEASE" | jq -r '.tag_name' | sed 's/^v//')
          
          echo "Latest IG Publisher version: $LATEST_VERSION"
          
          # Get current version from last release tag
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=$(echo "$CURRENT_TAG" | sed 's/^v//' | sed 's/-ig.*//')
          
          echo "Current Docker image version: $CURRENT_VERSION"
          echo "Latest IG Publisher version: $LATEST_VERSION"
          
          # Compare versions
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ] || [ "${{ github.event.inputs.force_release }}" == "true" ]; then
            echo "New version available or force release requested!"
            NEW_TAG="v${LATEST_VERSION}-ig$(date +%Y%m%d)"
            
            # Check if this tag already exists
            if git tag -l | grep -q "^${NEW_TAG}$"; then
              echo "Tag $NEW_TAG already exists, adding time suffix"
              NEW_TAG="v${LATEST_VERSION}-ig$(date +%Y%m%d-%H%M)"
            fi
            
            echo "new_version_available=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          else
            echo "No new version available"
            echo "new_version_available=false" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    runs-on: ubuntu-latest
    needs: check-ig-publisher-version
    if: needs.check-ig-publisher-version.outputs.new_version_available == 'true'
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.check-ig-publisher-version.outputs.new_tag }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.check-ig-publisher-version.outputs.new_tag }}" -m "Auto-release for IG Publisher v${{ needs.check-ig-publisher-version.outputs.latest_version }}"
          git push origin "${{ needs.check-ig-publisher-version.outputs.new_tag }}"

      - name: Get tool versions from built image
        id: tool-versions
        run: |
          # Wait briefly until the image is available
          sleep 30
          
          # Get versions from the freshly built image
          IG_VERSION=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-ig-publisher-version.outputs.new_tag }} java -jar /opt/ig/publisher.jar --version 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "${{ needs.check-ig-publisher-version.outputs.latest_version }}")
          JAVA_VERSION=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-ig-publisher-version.outputs.new_tag }} java --version 2>&1 | head -1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "21")
          NODE_VERSION=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-ig-publisher-version.outputs.new_tag }} node --version | sed 's/^v//')
          SUSHI_VERSION=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-ig-publisher-version.outputs.new_tag }} sushi --version 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "latest")
          
          echo "ig_version=$IG_VERSION" >> $GITHUB_OUTPUT
          echo "java_version=$JAVA_VERSION" >> $GITHUB_OUTPUT
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "sushi_version=$SUSHI_VERSION" >> $GITHUB_OUTPUT

      - name: Get release timestamp
        id: release-time
        run: |
          echo "timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-ig-publisher-version.outputs.new_tag }}
          name: "IG Publisher Docker ${{ needs.check-ig-publisher-version.outputs.new_tag }}"
          generate_release_notes: false
          body: |
            ## 🚀 Automatic Release - New IG Publisher Version!
            
            **IG Publisher Version:** `${{ needs.check-ig-publisher-version.outputs.latest_version }}` (previously: `${{ needs.check-ig-publisher-version.outputs.current_version }}`)
            
            ## 🐳 Docker Image
            
            ```bash
            # Pull & Quick Start
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-ig-publisher-version.outputs.new_tag }}
            
            docker run --rm -v $(pwd):/github/workspace \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-ig-publisher-version.outputs.new_tag }} \
              igpublisher -ig ig.ini
            ```
            
            ## 📦 Available Tags
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-ig-publisher-version.outputs.new_tag }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ## 🔧 Included Versions
            - **IG Publisher:** ${{ steps.tool-versions.outputs.ig_version }}
            - **Java:** ${{ steps.tool-versions.outputs.java_version }} (Eclipse Temurin)
            - **Node.js:** ${{ steps.tool-versions.outputs.node_version }}
            - **SUSHI:** ${{ steps.tool-versions.outputs.sushi_version }}
            
            ## 🏗️ Platforms
            - `linux/amd64`
            - `linux/arm64`
            
            ## 🔄 Auto-Release
            This release was automatically created because a new IG Publisher version is available.
            
            **Release created:** ${{ steps.release-time.outputs.timestamp }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on success
        if: success()
        run: |
          echo "✅ Successfully created auto-release ${{ needs.check-ig-publisher-version.outputs.new_tag }}"
          echo "📦 IG Publisher updated from ${{ needs.check-ig-publisher-version.outputs.current_version }} to ${{ needs.check-ig-publisher-version.outputs.latest_version }}"